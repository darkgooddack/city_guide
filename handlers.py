from aiogram import Router, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram.filters import Command
from aiogram import F
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from sqlalchemy import update
from sqlalchemy.future import select
import keyboard
from database import get_db
import crud
from database import async_session_factory
from models import FoodPlase, User, Kitchen, Food_place_Kitchen
from urllib.parse import urlparse, parse_qs, unquote



router = Router()


@router.message(Command("start"))
async def start_handler(msg: Message):
    async for session in get_db():
        user_exists = await crud.check_user_exists(msg.from_user.id, session)

        if not user_exists:
            await crud.add_user(msg.from_user.id, msg.from_user.username, session)
            await msg.answer(
                text=f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ City Guide –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É! "
                     "üìç –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞, –º–∞—Ä—à—Ä—É—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è. "
                     "üé® –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–≥–æ–ª–∫–∏ –≥–æ—Ä–æ–¥–∞!",
                reply_markup=keyboard.get_inline_subscription_keyboard()
            )
        else:
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}! üëã –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏!"

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_main_keyboard())


@router.callback_query(lambda c: c.data == "subscribe")
async def subscribe_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    async for session in get_db():
        await crud.update_notifications(user_id, True, session)
        await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ")


@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–º–µ–Ω—é")
async def menu(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_main_keyboard())

@router.message(F.text == "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def recomendations(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏:", reply_markup=keyboard.get_recomendation_keyboard())


@router.message(F.text == "üç¥ –ì–¥–µ –ø–æ–µ—Å—Ç—å")
async def food_place(msg: types.Message):
    async for session in get_db():
        try:
            user_id = msg.from_user.id
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalars().first()

            if not user or not user.cuisine_preferences:
                await msg.answer("–ú—ã –Ω–µ –∑–Ω–∞–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –∫—É—Ö–Ω—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è!")
                return

            cuisine_preferences = user.cuisine_preferences

            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )

            await msg.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è.",
                reply_markup=keyboard
            )

        finally:
            await session.close()


@router.message(F.location)
async def handle_location(msg: types.Message):
    async for session in get_db():

        try:
            user_lat = msg.location.latitude
            user_lon = msg.location.longitude

            result = await session.execute(
                select(User).where(User.telegram_id == msg.from_user.id)
            )
            user = result.scalars().first()

            if not user or not user.cuisine_preferences:
                await msg.answer("–ú—ã –Ω–µ –∑–Ω–∞–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –∫—É—Ö–Ω—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è!")
                return

            cuisine_preferences = user.cuisine_preferences.split(",")

            restaurants = await get_restaurants(cuisine_preferences, session)

            if not restaurants:
                await msg.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π.")
                return

            response = "–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n\n"
            for restaurant in restaurants[:5]:
                route_url = generate_yandex_maps_route(user_lat, user_lon, restaurant.link_map)
                response += (
                    f"üè† <b>{restaurant.name}</b>\n"
                    f"üìã {restaurant.description}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {restaurant.address}\n"
                    f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {restaurant.time}\n"
                    f"üíµ –°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç: {restaurant.budget} —Ä—É–±.\n"
                    f"üöó <a href=\"{route_url}\">–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n"
                )

            await msg.answer(response, parse_mode="HTML")

        finally:
            await session.close()


#async def get_restaurants(preferences: list[str], session: AsyncSession):
        #    result = await session.execute(
        #select(FoodPlase)
        #.where(FoodPlase.name.in_(preferences))
        #.order_by(FoodPlase.budget.asc())
    #)
    #return result.scalars().all()

async def get_restaurants(preferences: list[str], session: AsyncSession):
    result = await session.execute(
        select(FoodPlase)
        .join(Food_place_Kitchen, FoodPlase.id == Food_place_Kitchen.food_place_id)
        .join(Kitchen, Kitchen.id == Food_place_Kitchen.kitchen_id)
        .where(Kitchen.name.in_(preferences))
        .order_by(FoodPlase.budget.asc())
    )
    return result.scalars().all()

# Function to generate a Yandex Maps route URL
def generate_yandex_maps_route(user_lat: float, user_lon: float, restaurant_link: str):
    parsed_url = urlparse(restaurant_link)
    query_params = parse_qs(parsed_url.query)

    if 'll' in query_params:
        restaurant_coords = query_params['ll'][0]

        restaurant_coords = unquote(restaurant_coords)

        restaurant_lon, restaurant_lat = map(float, restaurant_coords.split(','))

        base_url = "https://yandex.by/maps/?rtext="
        route_url = f"{base_url}{user_lat},{user_lon}~{restaurant_lat},{restaurant_lon}&rtt=auto"
        return route_url
    else:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ —Å—Å—ã–ª–∫–∏."


@router.message(F.text == "üèØüé≠ –ò–Ω—Ç–µ—Ä–µ—Å—ã")
async def intresting(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_intresting())

@router.message(F.text == "üé¨ –ö–∏–Ω–æ")
async def cinema(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_cinema_keyboard())

@router.message(F.text == "üå≤–ú–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏")
async def park(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_park_keyboard())


@router.message(F.text == "‚è™ –ù–∞–∑–∞–¥")
async def to_the_beginning(msg: Message):
    await msg.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", reply_markup=keyboard.get_main_keyboard())


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    telegram_id = message.from_user.id


    async for session in get_db():
        user = await crud.get_user(session, telegram_id)

        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        user_info = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"Username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –∫—É—Ö–Ω–µ: {user.cuisine_preferences or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {user.available_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ë—é–¥–∂–µ—Ç: {user.budget or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
            f"–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?"
        )

        await message.reply(user_info, reply_markup=keyboard.keyboard_settings)


def generate_cuisine_keyboard():
    cuisines = ["–Ø–ø–æ–Ω—Å–∫–∞—è", "–ö–∏—Ç–∞–π—Å–∫–∞—è", "–†—É—Å—Å–∫–∞—è", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cuisine, callback_data=f"cuisine_{cuisine}")]
            for cuisine in cuisines
        ]
    )
    return keyboard


@router.callback_query(lambda c: c.data == "edit_cuisine")
async def change_cuisine(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫—É—Ö–Ω—é:")

    await callback_query.message.edit_reply_markup(reply_markup=generate_cuisine_keyboard())


@router.callback_query(lambda c: c.data.startswith("cuisine_"))
async def save_cuisine(callback_query: CallbackQuery):
    async for session in get_db():
        selected_cuisine = callback_query.data.split("_")[1]

        user_id = callback_query.from_user.id

        stmt = (
            update(User)
            .where(User.telegram_id == user_id)
            .values(cuisine_preferences=selected_cuisine)
        )
        await session.execute(stmt)
        await session.commit()

        await callback_query.message.edit_text(f"–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {selected_cuisine} –∫—É—Ö–Ω—è!")









# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã" –¥–æ–ø–∏—Å–∞—Ç—å
@router.callback_query(lambda c: c.data == "edit_interests")
async def change_interests(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å:")
    await callback_query.message.edit_reply_markup(keyboard.keyboard_interests)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è" –¥–æ–ø–∏—Å–∞—Ç—å
@router.callback_query(lambda c: c.data == "edit_time")
async def change_time(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—â–µ–Ω–∏—è.")


@router.callback_query(lambda c: c.data == "edit_budget")
async def change_budget(callback_query: CallbackQuery):
    keyboard_budget = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1,000 ‚ÇΩ", callback_data="set_budget_1000")],
            [InlineKeyboardButton(text="2,000 ‚ÇΩ", callback_data="set_budget_2000")],
            [InlineKeyboardButton(text="3,000 ‚ÇΩ", callback_data="set_budget_3000")],
            [InlineKeyboardButton(text="5,000 ‚ÇΩ", callback_data="set_budget_5000")],
            [InlineKeyboardButton(text="10,000 ‚ÇΩ", callback_data="set_budget_10000")],
        ]
    )
    await callback_query.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:",
        reply_markup=keyboard_budget
    )

@router.callback_query(lambda c: c.data.startswith("set_budget_"))
async def set_budget(callback_query: CallbackQuery):
    budget_str = callback_query.data.replace("set_budget_", "")
    try:
        budget = int(budget_str)
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—é–¥–∂–µ—Ç–∞")
        return

    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        await crud.update_budget(user_id, budget, session)

    await callback_query.answer(f"–ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {budget} ‚ÇΩ!")

    await send_user_info(callback_query, user_id)


@router.callback_query(lambda c: c.data == "edit_notifications")
async def change_notifications(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        user = await crud.get_user(session, user_id)

    if user.notifications:
        keyboard_notifications = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="set_notifications_off")]
            ]
        )
        await callback_query.message.edit_text(
            "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –æ—Ç–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=keyboard_notifications
        )
    else:
        keyboard_notifications = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="set_notifications_on")]
            ]
        )
        await callback_query.message.edit_text(
            "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=keyboard_notifications
        )


@router.callback_query(lambda c: c.data == "set_notifications_on")
async def set_notifications_on(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        await crud.update_notifications(user_id, True, session)

    await callback_query.message.edit_reply_markup(None)

    await send_user_info(callback_query, user_id)


@router.callback_query(lambda c: c.data == "set_notifications_off")
async def set_notifications_off(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        await crud.update_notifications(user_id, False, session)

    await callback_query.message.edit_reply_markup(None)

    await send_user_info(callback_query, user_id)


async def send_user_info(callback_query: CallbackQuery, user_id: int):
    async with async_session_factory() as session:
        user = await crud.get_user(session, user_id)

    if not user:
        await callback_query.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    user_info = (
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"Username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –∫—É—Ö–Ω–µ: {user.cuisine_preferences or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {user.available_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ë—é–¥–∂–µ—Ç: {user.budget or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?"
    )

    await callback_query.message.reply(user_info, reply_markup=keyboard.keyboard_settings)
