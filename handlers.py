from aiogram import Router, types
from aiogram.fsm.state import StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram import F
import keyboard
from database import get_db
import crud
from database import async_session_factory


router = Router()


@router.message(Command("start"))
async def start_handler(msg: Message):
    async for session in get_db():
        user_exists = await crud.check_user_exists(msg.from_user.id, session)

        if not user_exists:
            await crud.add_user(msg.from_user.id, msg.from_user.username, session)
            await msg.answer(
                text=f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ City Guide –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É! "
                     "üìç –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞, –º–∞—Ä—à—Ä—É—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ª–æ–∫–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è. "
                     "üé® –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–≥–æ–ª–∫–∏ –≥–æ—Ä–æ–¥–∞!",
                reply_markup=keyboard.get_inline_subscription_keyboard()  # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            )


@router.callback_query(lambda c: c.data == "subscribe")
async def subscribe_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    async for session in get_db():
        await crud.update_notifications(user_id, True, session)
        await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ")


@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–º–µ–Ω—é")
async def menu(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_main_keyboard())

@router.message(F.text == "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def recomendations(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏:", reply_markup=keyboard.get_recomendation_keyboard())

@router.message(F.text == "üç¥ –ï–¥–∞")
async def food_place(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_food_place_keyboard())

@router.message(F.text == "üèØ –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã")
async def cultural_place(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_cultural_place_keyboard())

@router.message(F.text == "üé¨ –ö–∏–Ω–æ")
async def cinema(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_cinema_keyboard())

@router.message(F.text == "üå≤–ú–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏")
async def park(msg: Message):
    await msg.answer("*—Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π*:", reply_markup=keyboard.get_park_keyboard())


@router.message(F.text == "‚è™ –ù–∞–∑–∞–¥")
async def to_the_beginning(msg: Message):
    await msg.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", reply_markup=keyboard.get_main_keyboard())


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    telegram_id = message.from_user.id


    async for session in get_db():
        user = await crud.get_user(session, telegram_id)

        if not user:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        user_info = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"Username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –∫—É—Ö–Ω–µ: {user.cuisine_preferences or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {user.available_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ë—é–¥–∂–µ—Ç: {user.budget or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
            f"–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?"
        )

        await message.reply(user_info, reply_markup=keyboard.keyboard_settings)


@router.callback_query(lambda c: c.data == "edit_cuisine")
async def change_cuisine(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫—É—Ö–Ω—é:")
    await callback_query.message.edit_reply_markup(keyboard.keyboard_cuisine)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã" –¥–æ–ø–∏—Å–∞—Ç—å
@router.callback_query(lambda c: c.data == "edit_interests")
async def change_interests(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å:")
    await callback_query.message.edit_reply_markup(keyboard.keyboard_interests)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è" –¥–æ–ø–∏—Å–∞—Ç—å
@router.callback_query(lambda c: c.data == "edit_time")
async def change_time(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—â–µ–Ω–∏—è.")


@router.callback_query(lambda c: c.data == "edit_budget")
async def change_budget(callback_query: CallbackQuery):
    keyboard_budget = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1,000 ‚ÇΩ", callback_data="set_budget_1000")],
            [InlineKeyboardButton(text="2,000 ‚ÇΩ", callback_data="set_budget_2000")],
            [InlineKeyboardButton(text="3,000 ‚ÇΩ", callback_data="set_budget_3000")],
            [InlineKeyboardButton(text="5,000 ‚ÇΩ", callback_data="set_budget_5000")],
            [InlineKeyboardButton(text="10,000 ‚ÇΩ", callback_data="set_budget_10000")],
        ]
    )
    await callback_query.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:",
        reply_markup=keyboard_budget
    )

@router.callback_query(lambda c: c.data.startswith("set_budget_"))
async def set_budget(callback_query: CallbackQuery):
    budget_str = callback_query.data.replace("set_budget_", "")
    try:
        budget = int(budget_str)
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—é–¥–∂–µ—Ç–∞")
        return

    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        await crud.update_budget(user_id, budget, session)

    await callback_query.answer(f"–ë—é–¥–∂–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {budget} ‚ÇΩ!")

    await send_user_info(callback_query, user_id)


@router.callback_query(lambda c: c.data == "edit_notifications")
async def change_notifications(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        user = await crud.get_user(session, user_id)

    if user.notifications:
        keyboard_notifications = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="set_notifications_off")]
            ]
        )
        await callback_query.message.edit_text(
            "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –æ—Ç–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=keyboard_notifications
        )
    else:
        keyboard_notifications = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="set_notifications_on")]
            ]
        )
        await callback_query.message.edit_text(
            "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=keyboard_notifications
        )


@router.callback_query(lambda c: c.data == "set_notifications_on")
async def set_notifications_on(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        await crud.update_notifications(user_id, True, session)

    await callback_query.message.edit_reply_markup(None)

    await send_user_info(callback_query, user_id)


@router.callback_query(lambda c: c.data == "set_notifications_off")
async def set_notifications_off(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    async with async_session_factory() as session:
        await crud.update_notifications(user_id, False, session)

    await callback_query.message.edit_reply_markup(None)

    await send_user_info(callback_query, user_id)


async def send_user_info(callback_query: CallbackQuery, user_id: int):
    async with async_session_factory() as session:
        user = await crud.get_user(session, user_id)

    if not user:
        await callback_query.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    user_info = (
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"Username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –∫—É—Ö–Ω–µ: {user.cuisine_preferences or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {user.available_time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ë—é–¥–∂–µ—Ç: {user.budget or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?"
    )

    await callback_query.message.reply(user_info, reply_markup=keyboard.keyboard_settings)
